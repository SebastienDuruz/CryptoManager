@page "/"
@using CryptoManager.Data
@using CryptoManager.Models
@using CryptoManager.Pages.Components

@inject CoinGeckoFetcher CoinGeckoFetcher
@inject UserAccountService UserAccountService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager

<PageTitle>Accounts Management</PageTitle>

@if(!_componentLoaded)
{
    <Loading/>
}
else
{
    <h2 class="m-2">Accounts Management</h2>

    <div class="d-flex">
        <div class="flex-column w-50">
            <div class="card m-2">
                <a href="stats" class="card-body btn btn-secondary">
                    <span class="oi oi-dollar" aria-hidden="true"></span> Total Value : @TotalValue.ToString("0.00 $")
                </a>
            </div>
        </div>  
        <div class="d-flex w-50">
            <div class="card m-2 flex-fill">
              <div class="card-body btn btn-primary" @onclick="() => AccountModalComponent.OpenAdd()">
                  <span class="oi oi-plus" aria-hidden="true"></span> New Account 
              </div>
            </div>
        </div>
    </div>  
    <EditForm Model="UserAccount">
        <div class="d-flex w-100 flex-fill">
            <div class="flex-fill w-50 p-2">
                <input class="form-control" @bind="TextFilter" @bind:event="oninput" placeholder="Filter Account..."></input>
            </div>
            <div class="flex-fill w-25 p-2">
                <InputSelect class="form-control" @bind-Value="CategoryFilter">
                    <option value="">All Categories</option>
                    @foreach(UserAccount distinctCategories in UserAccountService.UserAccounts.GroupBy(x => x.AccountCategory).Select(y => y.First()).ToList())
                    {
                        <option value="@distinctCategories.AccountCategory">@distinctCategories.AccountCategory</option>
                    }
                </InputSelect>
            </div>
            <div class="flex-fill w-25 p-2">
                <InputSelect class="form-control" @bind-Value="CoinFilter">
                    <option value="">All Coins</option>
                    @foreach(UserAccount distinctCategories in UserAccountService.UserAccounts.GroupBy(x => x.Coin).Select(y => y.First()).ToList())
                    {
                        <option value="@distinctCategories.Coin">@distinctCategories.Coin</option>
                    }
                </InputSelect>
            </div>
            <div class="flex-fill p-2">
                <button class="btn" @onclick="() => ResetFilters()">
                    <i class="oi oi-reload"></i>
                </button>
            </div>
        </div>
    </EditForm>

    <div class="d-flex w-100">
        <table class="table table-sm table-hover m-2">
            <thead>
                <tr>
                    <th scope="col">Name</th>
                    <th scope="col">Coin</th>
                    <th scope="col">Category</th>
                    <th scope="col">Amount</th>
                    <th scope="col">Value</th>
                    <th scope="col">Actions</th>
                </tr>
            </thead>       
            <tbody>
                @{ double displayedValue = 0; }
                @foreach(UserAccount account in UserAccountService.UserAccounts.OrderBy(x => x.Coin))
                {
                    CoinGeckoMarket? coin;

                    try
                    {
                        coin = CoinGeckoFetcher.Coins.Where(x => x.symbol.ToUpper() == account.Coin).FirstOrDefault();
                    }
                    catch(Exception ex)
                    {
                        coin = new CoinGeckoMarket() { current_price = 0, image = "NO DATA", name = "NO DATA", symbol = "NO DATA", id = "NO DATA"};
                    }

                    if(coin == null)
                    {
                        coin = new CoinGeckoMarket() { current_price = 0, image = "NO DATA", name = "NO DATA", symbol = "NO DATA", id = "NO DATA"};
                    }

                    @if(ApplyTextFilter(account.Name, account.AccountCategory, account.Coin) && ApplyCategoryFilter(account.AccountCategory) && ApplyCoinFilter(account.Coin))
                    {
                        displayedValue += double.Parse(((coin.current_price * account.CoinAmount).ToString("0.00")));
                        <tr class="table-active">
                            <th class="align-middle" scope="row">@account.Name</th>
                            <td class="align-middle" @onclick="() => LoadCoinPage(coin.id)" role="button">
                                <img rel="icon" src="@coin.image" width="30" height="30">
                                <span class="fw-bold p-1"> @coin.name (@coin.symbol.ToUpper())</span>
                            </td>
                            <td class="align-middle">@account.AccountCategory</td>
                            <td class="align-middle">@account.CoinAmount</td>
                            <td class="align-middle">@((coin.current_price * account.CoinAmount).ToString("0.00 $"))</td>
                            <td class="align-middle">
                                <button class="btn" @onclick="() => AccountModalComponent.OpenModify(account)">
                                    <i class="oi oi-pencil"></i>
                                </button>
                                <button class="btn" @onclick="() => DeleteAccountModalComponent.Open(account)">
                                    <i class="oi oi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
            <tfoot>
                <tr class="table-footer">
                    <th class="align-middle" scope="row">Total Value</th>
                    <td class="align-middle" role="button"></td>
                    <td class="align-middle"></td>
                    <td class="align-middle"></td>
                    <td class="align-middle">@displayedValue.ToString("0.00 $")</td>
                    <td class="align-middle"></td>
                </tr>
            </tfoot>
        </table>
    </div>

    <CascadingValue Value="this">
        <AddAccountModal @ref="AccountModalComponent"></AddAccountModal>
    </CascadingValue>
    <CascadingValue Value="this">
        <DeleteAccountModal @ref="DeleteAccountModalComponent"></DeleteAccountModal>
    </CascadingValue>
}



@code{
    private AddAccountModal? AccountModalComponent { get; set; }
    private DeleteAccountModal? DeleteAccountModalComponent { get; set; }
    private double TotalValue { get; set; }
    private double DisplayedValue { get; set; }
    private string? ActionTitle { get; set; }
    private string TextFilter { get; set; }
    private string CategoryFilter { get; set; }
    private string CoinFilter { get; set; }
    private UserAccount UserAccount { get; set; } = new UserAccount();
    private bool _componentLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        this.AccountModalComponent = new AddAccountModal();
        this.TextFilter = "";
        this.CategoryFilter = "";
        this.CoinFilter = "";
        await Task.Run(UpdateTotalPrice);
        this._componentLoaded = true;
    }

    private async Task UpdateTotalPrice()
    {
        TotalValue = 0;
        foreach(UserAccount account in UserAccountService.UserAccounts)
        {
            try
            {
                TotalValue += CoinGeckoFetcher.Coins.Where(x => x.symbol.ToUpper() == account.Coin).FirstOrDefault().current_price * account.CoinAmount;
            }
            catch(Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }

    private void LoadCoinPage(string coinId)
    {
        if(coinId != "NO DATA")
            NavManager.NavigateTo($"/coin/{coinId}");
    }

    private async Task DeleteAccount(UserAccount accountToDelete)
    {
        string title = $"Are you sure you want to delete the account [{accountToDelete.Name}] ?";
        if (!await JSRuntime.InvokeAsync<bool>("confirm", new object[] { title }))
            return;

        UserAccountService.DeleteUserAccount(accountToDelete.Uuid);
        this.RefreshComponent();
    }

    public void RefreshComponent()
    {
        this.UpdateTotalPrice();
        StateHasChanged();
    }

    private bool ApplyTextFilter(string accountName, string category, string coin)
    {
        accountName = accountName.ToLower();
        category = category.ToLower();
        coin = coin.ToLower();

        if (accountName.Contains(TextFilter.ToLower()))
            return true;
        if (category.Contains(TextFilter.ToLower()))
            return true;
        if (coin.Contains(TextFilter.ToLower()))
            return true;

        return false;
    }

    private bool ApplyCategoryFilter(string category)
    {
        category = category.ToLower();
        if (category.Contains(CategoryFilter.ToLower()))
            return true;

        return false;
    }

    private bool ApplyCoinFilter(string coin)
    {
        coin = coin.ToLower();
        if (coin.Contains(CoinFilter.ToLower()))
            return true;

        return false;
    }

    private void ResetFilters()
    {
        TextFilter = "";
        CategoryFilter = "";
        CoinFilter = "";
    }
}
