@page "/settings"
@using CryptoManager.Data
@using CryptoManager.Models
@using CryptoManager.Pages.Components

@inject UserSettingsService UserSettingsService
@inject CoinGeckoFetcher CoinGeckoFetcher
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime

<PageTitle>Settings</PageTitle>

<h2 class="m-2">App settings</h2>

<EditForm Model="NewSettings">
    <div class="m-2 mt-4">
        <span class="h5">Coins settings</span>
        <div class="d-flex w-100 align-items-center justify-content-center">
            <div class="p-2 w-75">
                Total coins to load from the CoinGecko API (have impact on the pages load time)
            </div>
            <div class="p-2 w-25">
                <InputSelect class="form-control" TValue="int" @bind-Value="NewSettings.CoinAmount">
                    @foreach(int value in CoinAmounts)
                    {
                        <option value="@value">@value</option>
                    }
                </InputSelect>
            </div>
        </div>
        <div class="d-flex w-100 align-items-center justify-content-center">
            <div class="p-2 w-75">
                Total coins to load on each page (apply to the map page)
            </div>
            <div class="p-2 w-25">
                <InputSelect class="form-control" TValue="int" @bind-Value="NewSettings.CoinPerPage">
                    @foreach(int value in CoinPerPages)
                    {
                        <option value="@value">@value</option>
                    }
                </InputSelect>
            </div>
        </div>
    </div>
    <div class="m-2">
        <span class="h5">General settings</span>
        <div class="d-flex w-100 align-items-center justify-content-center">
            <div class="p-2 w-75">
                Color theme of the application (themes provided by Bootswatch)
            </div>
            <div class="p-2 w-25">
                <InputSelect class="form-control" TValue="string" @bind-Value="NewSettings.Theme">
                    @foreach(string theme in Themes)
                    {
                        <option value="@theme">@theme</option>
                    }
                </InputSelect>
            </div>
        </div>
    </div>
    <div class="d-flex mt-2 w-100 align-items-center justify-content-center">
        <button class="btn btn-outline-primary w-100 m-2" @onclick="() => SaveUserSettings()">Save</button>
    </div>
</EditForm>

@code{
    private UserSettings NewSettings { get; set; }
    private List<string> Themes { get; set; }
    private List<int> CoinPerPages { get; set; }
    private List<int> CoinAmounts { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.NewSettings = UserSettingsService.ReadUserSettings();
        this.Themes = new List<string>();
        this.GetThemesFromCSSFiles();

        // TODO : Find a better way to force the user to set these settings
        this.CoinPerPages = new List<int>() { 25, 50, 100 };
        this.CoinAmounts = new List<int>() { 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000 };
    }

    private async Task SaveUserSettings()
    {
        UserSettingsService.WriteUserSettings(NewSettings);

        // Apply the changes without the need of restarting the app
        UserSettingsService.ReloadSettings();
        CoinGeckoFetcher.RefreshCoinList(UserSettingsService.UserSettings.CoinAmount);

        await JSRuntime.InvokeVoidAsync("alert", "Your settings has been saved !");

        // Refresh the page to apply potential theme change
        NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
    }

    private void GetThemesFromCSSFiles()
    {
        // Get each CSS file on the themes folder
        string[] cssFiles = Directory.GetFiles(Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "css", "bootstrap"), "*.css");

        foreach(string path in cssFiles)
        {
            this.Themes.Add(Path.GetFileName(path).Replace(".min.css", ""));
        }
    }
}