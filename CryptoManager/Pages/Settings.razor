@page "/settings"
@using CryptoManager.Data
@using CryptoManager.Models
@using CryptoManager.Pages.Components

@inject UserSettingsService UserSettingsService
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime

<PageTitle>App settings page</PageTitle>

<h2 class="m-2">App settings</h2>

<EditForm Model="NewSettings">
    <div class="d-flex w-100 align-items-center justify-content-center">
        <div class="p-2">
            Number of coins to load from the CoinGecko API (have impact on the pages load time)
        </div>
        <div class="p-2">
            <InputNumber class="form-control" TValue="int" step="250" min="250" max="2000" @bind-Value="NewSettings.CoinAmount">
            </InputNumber>
        </div>
    </div>
    <div class="d-flex w-100 align-items-center justify-content-center">
        <div class="p-2">
            Color theme of the application (provided by Bootswatch)
        </div>
        <div class="p-2">
            <InputSelect class="form-control" TValue="string" @bind-Value="NewSettings.Theme">
                @foreach(string theme in Themes)
                {
                    <option value="@theme">@theme</option>
                }
            </InputSelect>
        </div>
    </div>
    <div class="d-flex w-100 align-items-center justify-content-center">
        <button class="btn btn-outline-primary" @onclick="() => SaveUserSettings()">Save</button>
    </div>
</EditForm>

@code{
    private UserSettings NewSettings { get; set; }

    private List<string> Themes { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.NewSettings = UserSettingsService.ReadUserSettings();
        this.Themes = new List<string>();
        this.GetThemesFromCSSFiles();
    }

    private async Task SaveUserSettings()
    {
        UserSettingsService.WriteUserSettings(NewSettings);

        await JSRuntime.InvokeVoidAsync("alert", "Settings has been saved, restart the application to apply the changes !");
    }

    private void GetThemesFromCSSFiles()
    {
        // Get each CSS file on the themes folder
        string[] cssFiles = Directory.GetFiles(Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "css", "bootstrap"), "*.css");

        foreach(string path in cssFiles)
        {
            this.Themes.Add(Path.GetFileName(path).Replace(".min.css", ""));
        }
    }
}