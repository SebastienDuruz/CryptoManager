@page "/stats"

@using ChartJs.Blazor.PieChart
@using CryptoManager.Data
@using CryptoManager.Models
@using System.Drawing

@inject CoinGeckoFetcher CoinGeckoFetcher
@inject UserAccountService UserAccountService
@inject UserSettingsService UserSettingsService
@inject IJSRuntime JSRuntime

<PageTitle>Accounts Statistics</PageTitle>

@if(!_componentLoaded)
{
    <Loading/>
}
else
{
    <h2 class="m-2">Accounts Statistics</h2>
    @if(this.DistributionChart == null && this.CategoryChart == null)
    {
    <div class="m-2 mt-4 d-flex">
        <div>
            Charts are not activated !
        </div>
    </div>
    }
    else if(UserAccountService.UserAccounts.Count() == 0)
    {
    <div class="m-2 mt-4 d-flex">
        <div>
            No accounts to display !
        </div>
    </div>
    }
    else
    {
    <div class="m-2 mt-4 d-flex align-self-center">
        @if(UserSettingsService.UserSettings.CoinDistributionChart)
        {
        <div class="w-50 align-self-center">
            <Chart Config="DistributionChart"></Chart>
        </div>    
        }
        @if(UserSettingsService.UserSettings.CategoryDistributionChart)
        {
        <div class="w-50">
            <Chart Config="CategoryChart"></Chart>
        </div>
        }
    </div>
    }
}


@code {
    private PieConfig DistributionChart { get; set; }
    private PieConfig CategoryChart { get; set; }
    private Random Rand { get; set; }
    private List<Color> Colors { get; set; }
    List<DistributionChartData> DistributionChartDatas { get; set; }
    List<CategoryChartData> CategoriesChartDatas { get; set; }
    private bool _componentLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        List<string> coinsIds = new List<string>();
        this.Rand = new Random();
        this.Colors = new List<Color>()
        {
            Color.Red,
            Color.Violet,
            Color.Blue,
            Color.Green,
            Color.Pink,
        };
        await Task.Run(BuildChartsAsync);
        this._componentLoaded = true;
    }

    private async Task BuildChartsAsync()
    {
        this.DistributionChartDatas = new List<DistributionChartData>();
        this.CategoriesChartDatas = new List<CategoryChartData>();

        foreach(UserAccount account in UserAccountService.UserAccounts)
        {
            DistributionChartData distributionData = this.DistributionChartDatas.Where(x => x.CoinSymbol == account.Coin).FirstOrDefault();
            CategoryChartData categoryData = this.CategoriesChartDatas.Where(x => x.CategoryName == account.AccountCategory).FirstOrDefault();

            try
            {
                // Get the coin id for CoinGecko API Calls
                string accountCoinId = CoinGeckoFetcher.Coins.Where(x => x.symbol == account.Coin.ToLower()).FirstOrDefault().id;

                // Alredy exists, only add amount DISTRIBUTION
                if(distributionData != null)
                {
                    this.DistributionChartDatas.Where(x => x.CoinSymbol == account.Coin).First().TotalAmount += account.CoinAmount;
                }
                else
                {
                    this.DistributionChartDatas.Add(new DistributionChartData()
                    {
                        CoinSymbol = account.Coin,
                        CoinId = accountCoinId,
                        TotalAmount = account.CoinAmount
                    });
                }

                // Alredy exists, only add amount CATEGORIES
                if(categoryData != null)
                {
                    this.CategoriesChartDatas.Where(x => x.CategoryName == account.AccountCategory).First().TotalValue += double.Parse(await CoinGeckoFetcher.GetSimplePrice(accountCoinId));
                }
                else
                {
                    this.CategoriesChartDatas.Add(new CategoryChartData()
                    {
                        CategoryName = account.AccountCategory,
                        TotalValue = double.Parse(await CoinGeckoFetcher.GetSimplePrice(accountCoinId))
                    });
                }
            }
            catch(Exception ex)
            {
                
            }

        }

        // Get the total value of coins for all coins
        foreach(DistributionChartData data in this.DistributionChartDatas)
        {
            data.TotalValue = double.Parse(await CoinGeckoFetcher.GetSimplePrice(data.CoinId)) * data.TotalAmount;
        }

        // Fetch the prices from CoinGecko and build data for the repartition chart
        if(UserSettingsService.UserSettings.CoinDistributionChart)
        {
            Color chartColor = Colors[this.Rand.Next(0, Colors.Count())];

            // build the base chart
            this.DistributionChart = new PieConfig()
            {
                Options = new PieOptions()
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Distribution of the accounts by Coin ($)"
                    }
                }
            };

            // Build datas and labels
            PieDataset<double> pricesDataset = new PieDataset<double>()
            {
                HoverBackgroundColor = ColorUtil.FromDrawingColor(chartColor),
                BorderColor = ColorUtil.FromDrawingColor(chartColor)

            };
            foreach(DistributionChartData data in this.DistributionChartDatas)
            {
                this.DistributionChart.Data.Labels.Add(data.CoinSymbol);
                pricesDataset.Add(double.Parse(data.TotalValue.ToString("0.00")));
            }

            // Add the datas to the chart
            this.DistributionChart.Data.Datasets.Add(pricesDataset);
        }
        if (UserSettingsService.UserSettings.CategoryDistributionChart)
        {
            Color chartColor = Colors[this.Rand.Next(0, Colors.Count())];
            this.CategoryChart = new PieConfig()
            {
                Options = new PieOptions()
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Distribution of the accounts by Category ($)"
                    }
                }
            };

            PieDataset<double> pricesDataset = new PieDataset<double>()
            {
                HoverBackgroundColor = ColorUtil.FromDrawingColor(chartColor),
                BorderColor = ColorUtil.FromDrawingColor(chartColor)
            };

            foreach(CategoryChartData data in this.CategoriesChartDatas)
            {
                this.CategoryChart.Data.Labels.Add(data.CategoryName);
                pricesDataset.Add(Double.Parse(data.TotalValue.ToString("0.00")));
            }

            this.CategoryChart.Data.Datasets.Add(pricesDataset);
        }
    }
}
