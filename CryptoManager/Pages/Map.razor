@page "/map"
@using CryptoManager.Data
@using CryptoManager.Models

@inject CoinGeckoFetcher CoinGeckoFetcher
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager

<PageTitle>Crypto Map</PageTitle>

<h2>Crypto Currencies by Market Cap</h2>

@if(CoinGeckoFetcher.Coins == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-hover">
        <thead>
            <tr>
                <th>Coin</th>
                <th>Symbol</th>
                <th>Price</th>
                <th>24h changes</th>
                <th>24h Volume</th>
                <th>Mkt Cap</th>
            </tr>
        </thead>
        <tbody>
            @foreach (CoinGeckoMarket coin in CoinGeckoFetcher.Coins)
            {
                <tr class="table-active" role="button" @onclick="() => LoadCoinPage(coin.id)">
                    <th scope="row">
                        <img rel="icon" src="@coin.image" width="30" height="30">
                        <span class="fw-bold p-1 pe-auto"> @coin.name</span>
                    </th>
                    <td>
                        <span>@coin.symbol.ToUpper()</span>
                    </td>
                    <td>@(coin.current_price.ToString("0.00")) $</td>
                    <td class="@(coin.price_change_percentage_24h < 0 ? "text-danger" : "text-success")">@(coin.price_change_percentage_24h.ToString("0.00")) %</td>
                    <td>@(coin.total_volume.ToString("0.00")) $</td>
                    <td>@(coin.market_cap.ToString("0.00")) $</td>
                </tr>
            }
        </tbody>
    </table>
}

@code{

    protected override async Task OnInitializedAsync()
    {
        CoinGeckoFetcher.Coins = CoinGeckoFetcher.GetCoins();
    }

    private void LoadCoinPage(string coinId)
    {
        NavManager.NavigateTo($"/coin/{coinId}");
    }
}