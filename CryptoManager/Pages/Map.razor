@page "/map"
@using CryptoManager.Data
@using CryptoManager.Models

@inject CoinGeckoFetcher CoinGeckoFetcher
@inject UserSettingsService UserSettingsService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager

<PageTitle>Crypto Map</PageTitle>

<h2 class="m-2">Crypto Currencies by Market Cap</h2>

@if(!_componentLoaded)
{
    <Loading/>
}
else
{
    <div class="d-flex w-100">
        <input class="w-100 m-2 form-control" @bind-Value="FilterText" @bind-Value:event="oninput" placeholder="Search..." ></input>
    </div>
    <div class="d-flex w-100">
        <table class="table table-sm table-hover m-2">
            <thead>
                <tr>
                    <th>Coin</th>
                    <th>Symbol</th>
                    <th>Price</th>
                    <th>24h changes</th>
                    <th>24h Volume</th>
                    <th>Mkt Cap</th>
                </tr>
            </thead>
            <tbody>
                @if(String.IsNullOrWhiteSpace(FilterText))
                {
                    @foreach (CoinGeckoMarket coin in CoinGeckoFetcher.Coins.Take(new Range((CurrentPage * PageSize) - PageSize, CurrentPage * PageSize)))   
                    {
                        <tr class="table-active" role="button" @onclick="@(async () => LoadCoinPage(coin.id))">
                            <th class="align-middle" scope="row">
                                <img rel="icon" src="@coin.image" width="30" height="30">
                                <span class="fw-bold p-1 pe-auto"> @coin.name</span>
                            </th>
                            <td class="align-middle">
                                <span>@coin.symbol.ToUpper()</span>
                            </td>
                            <td class="align-middle">@(coin.current_price.ToString("0.00")) $</td>
                            <td class="align-middle @(coin.price_change_percentage_24h < 0 ? "text-danger" : "text-success")">@(String.Format("{0:0.##}", coin.price_change_percentage_24h)) %</td>
                            <td class="align-middle">@(coin.total_volume.ToString("0.00")) $</td>
                            <td class="align-middle">@(coin.market_cap.ToString("0.00")) $</td>
                        </tr>
                    }
                }
                else
                {
                    @foreach (CoinGeckoMarket coin in CoinGeckoFetcher.Coins)   
                    {
                        if(coin.name.ToLower().Contains(FilterText.ToLower()) || coin.symbol.ToLower().Contains(FilterText.ToLower()) || coin.id.ToLower().Contains(FilterText.ToLower()))
                        {
                            <tr class="table-active" role="button" @onclick="@(async () => LoadCoinPage(coin.id))">
                                <th class="align-middle" scope="row">
                                    <img rel="icon" src="@coin.image" width="30" height="30">
                                    <span class="fw-bold p-1 pe-auto"> @coin.name</span>
                                </th>
                                <td class="align-middle">
                                    <span>@coin.symbol.ToUpper()</span>
                                </td>
                                <td class="align-middle">@(coin.current_price.ToString("0.00")) $</td>
                                <td class="align-middle @(coin.price_change_percentage_24h < 0 ? "text-danger" : "text-success")">@(String.Format("{0:0.##}", coin.price_change_percentage_24h)) %</td>
                                <td class="align-middle">@(coin.total_volume.ToString("0.00")) $</td>
                                <td class="align-middle">@(coin.market_cap.ToString("0.00")) $</td>
                            </tr>
                        }
                    }
                }
                
            </tbody>
        </table>
    </div>
    @if(String.IsNullOrWhiteSpace(FilterText) && !CoinGeckoFetcher.OfflineMode)
    {
    <div class="d-flex w-100 align-items-between justify-content-between">
        <div class="btn-toolbar flex-fill justify-content-between" role="toolbar">
            <div class="btn-group m-2" role="group">
                <button type="button" class="btn @(1 == CurrentPage ? "btn-primary" : "btn-secondary")" @onclick="(x) => ChangeCurrentPage(1)">First</button>
            </div>
            <div class="btn-group m-2" role="group">
                @for(int i = CurrentPage -4; i < CurrentPage +5; ++i)
                {
                    int page = i;

                    if(page >= 1 && page <= TotalPages)
                    {
                        <button type="button" class="btn @(i == CurrentPage ? "btn-primary" : "btn-secondary")" @onclick="(x) => ChangeCurrentPage(page)">@i</button>
                    }
                }
            </div>
            <div class="btn-group m-2" role="group">
                <button type="button" class="btn @(TotalPages == CurrentPage ? "btn-primary" : "btn-secondary")" @onclick="(x) => ChangeCurrentPage(TotalPages)">Last</button>
            </div>
        </div>
    </div>
    }
}

@code{
    private string FilterText { get; set; }
    private bool IsFiltering { get; set; }
    private int PageSize { get; set; }
    private int CurrentPage { get; set; }
    private int TotalPages { get; set; }
    private bool _componentLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        this.FilterText = "";
        this.IsFiltering = false;
        this.PageSize = UserSettingsService.UserSettings.CoinPerPage;
        this.CurrentPage = 1;
        this.TotalPages = CoinGeckoFetcher.Coins.Count / this.PageSize;
        this._componentLoaded = true;
    }

    private void LoadCoinPage(string coinId)
    {
        NavManager.NavigateTo($"/coin/{coinId}");
    }

    private void ChangeCurrentPage(int page)
    {
        this.CurrentPage = page;
        StateHasChanged();
    }
}